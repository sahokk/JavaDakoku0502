import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Dialog;
import java.awt.Frame;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

import client_system.ChoiceFacility;

public class ReservationDialog extends Dialog implements ActionListener, WindowListener, ItemListener{
	boolean canceled;

	//パネル
	Panel		panelNorth;
	Panel		panelCenter;
	Panel		panelSouth;

	//入出力コンポーネント
	ChoiceFacility	choiceFacility;
	TextField		tfYear, tfMonth, tfDay;
	ChoiceHour		startHour;
	ChoiceMinute	startMinute;
	ChoiceHour		endHour;
	ChoiceMinute	endMinute;

	//ボタン
	Button		buttonOK;
	Button		buttonCancel;

	public ReservationDialog(Frame owner) {
		//基底クラスのコンストラクタを呼び出す
		super(owner, "新規予約", true);

		//初期値キャンセル設定
		canceled = true;

		//教室選択ボックスの生成
		choiceFacility = new ChoiceFacility();
		//テキストフィールドの生成
		tfYear = new TextField("", 4);
		tfMonth = new TextField("", 2);
		tfDay = new TextField("", 2);
		//開始時刻（時分）選択ボックス生成
		startHour = new ChoiceHour();
		startMinute = new ChoiceMinute();
		//終了時刻選択ボックスの生成
		endHour = new ChoiceHour();
		endMinute = new ChoiceMinute();

		//ボタンの生成
		buttonOK = new Button("予約実行");
		buttonCancel = new Button("キャンセル");
		//パネルの生成
		panelNorth = new Panel();
		panelCenter = new Panel();
		panelSouth = new Panel();
		//上部パネルに教室選択ボックス、年月日入力欄を配置
		panelNorth.add(new Label("教室 "));
		panelNorth.add(choiceFacility);
		panelNorth.add(new Label("予約日"));
		panelNorth.add(tfYear);
		panelNorth.add(new Label("年"));
		panelNorth.add(tfMonth);
		panelNorth.add(new Label("月"));
		panelNorth.add(tfDay);
		panelNorth.add(new Label("日"));

		//中央パネルに予約開始時刻、終了時刻入力用選択ボックスを追加
		panelCenter.add(new Label("予約時間"));
		panelCenter.add(startHour);
		panelCenter.add(new Label("時"));
		panelCenter.add(startMinute);
		panelCenter.add(new Label("分〜"));
		panelCenter.add(endHour);
		panelCenter.add(new Label("時"));
		panelCenter.add(endMinute);
		panelCenter.add(new Label("分"));
		panelCenter.add(new Label("予約可能時間は09:30~21:30です。"));

		//株パネルに２つのボタンを追加
		panelSouth.add(buttonCancel);
		panelSouth.add(new Label("   "));
		panelSouth.add(buttonOK);

		//ReservationDIalogをBorderLayoutに設定し3つのパネルを追加
		setLayout(new BorderLayout());
		add(panelNorth, BorderLayout.NORTH);
		add(panelCenter, BorderLayout.CENTER);
		add(panelSouth, BorderLayout.SOUTH);

		//WindowListenerを追加
		addWindowListener(this);

		//ボタンにActionListenerを追加
		buttonOK.addActionListener(this);
		buttonCancel.addActionListener(this);
		//教室選択ボックス、時・分選択ボックスそれぞれに項目Listenerを追加
		choiceFacility.addItemListener(this);
		startHour.addItemListener(this);
		endHour.addItemListener(this);
		startMinute.addItemListener(this);
		endMinute.addItemListener(this);

		//選択された教室によって、時刻の範囲を設定
		resetTimeRange();
		startMinute.select("30");
		endMinute.select("30");
		//大きさの設定、ウィンドウのサイズ変更不可の設定
		this.setBounds(100, 100, 500, 160);
		setResizable(false);
	}

	private void resetTimeRange() {
		//時刻の範囲を設定する
		startHour.resetRange(9, 21);
		endHour.resetRange(9, 21);
	}
	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		if(e.getSource() == choiceFacility) {
			String startTime = startHour.getSelectedItem();
			String endTime = endHour.getSelectedItem();
			resetTimeRange();
			startHour.select(startTime);
			endHour.select(endTime);
		}else if(e.getSource() == startHour) {
			//開始時刻が変更されたら、終了時刻入力欄の時を開始時刻に合わせる
			int start = Integer.parseInt(startHour.getSelectedItem());
			String endTime = endHour.getSelectedItem();
			endHour.resetRange(start, Integer.parseInt(endHour.getLast()));
			if(Integer.parseInt(endTime) >= start) {
				endHour.select(endTime);
			}
		}else if(e.getSource() == endHour) {
			int end = Integer.parseInt(endHour.getSelectedItem());
			String startTime = startHour.getSelectedItem();
			startHour.resetRange(Integer.parseInt(startHour.getFirst()), end);
			if(Integer.parseInt(startTime) <= end) {
				startHour.select(startTime);
			}
		}

	}
	@Override
	public void windowOpened(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}
	@Override
	public void windowClosing(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		setVisible(false);
		dispose();
	}
	@Override
	public void windowClosed(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}
	@Override
	public void windowIconified(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}
	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}
	@Override
	public void windowActivated(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}
	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		if(e.getSource() == buttonCancel) {
			setVisible(false);
			dispose();
		}else if(e.getSource() == buttonOK) {
			canceled = false;
			setVisible(false);
			dispose();
		}

	}
}
