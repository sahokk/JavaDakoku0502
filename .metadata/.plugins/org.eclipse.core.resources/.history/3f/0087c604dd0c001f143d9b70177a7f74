import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Frame;
import java.awt.Label;
import java.awt.Panel;
import java.awt.TextArea;
import java.awt.TextField;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

public class MainFrame extends Frame implements ActionListener, ItemListener, WindowListener{
	ReservationControl reservationControl;

	Panel panelNorth;
	Panel panelNorthSub1;
	Panel panelNorthSub2;
	Panel panelCenter;
	Panel panelCenterSub1;
	Panel panelCenterSub2;
	Panel panelSouth;

	Button buttonLog;
	Button buttonExplanation;
	Button buttonReservation;
	Button buttonCheckReservation;
	Button buttonCheckFacilityReservation;
	//Button buttonCancelReservation;


	ChoiceFacility choiceFacility;
	TextField tfLoginID;
	TextArea textMessage;

	public MainFrame(ReservationControl rc) {
		reservationControl = rc;
		buttonLog = new Button("ログイン");
		buttonExplanation = new Button("教室概要");
		buttonReservation = new Button("新規予約");
		buttonCheckReservation = new Button("予約状況確認");
		//buttonCancelReservation = new Button("予約キャンセル");
		buttonCheckFacilityReservation = new Button("教室予約状況確認");

		choiceFacility = new ChoiceFacility();

		tfLoginID = new TextField("未ログイン",12);
		tfLoginID.setEditable(false);

		setLayout(new BorderLayout());

		//上部パネルの上パネルに予約システムというラベルとログインボタンを追加
		panelNorthSub1 = new Panel();
		panelNorthSub1.add(new Label("教室予約システム"));
		panelNorthSub1.add(buttonLog);
		panelNorthSub1.add(new Label("ログインID"));
		panelNorthSub1.add(tfLoginID);

		//上部パネルの中央パネルに教室チョイス及び教室概要ボタンを追加
		panelNorthSub2 = new Panel();
		panelNorthSub2.add(new Label("教室 "));
		panelNorthSub2.add(choiceFacility);
		panelNorthSub2.add(new Label(" "));
		panelNorthSub2.add(buttonExplanation);
		panelNorthSub2.add(buttonCheckFacilityReservation);


		//上部パネルに二つのパネルを追加
		panelNorth = new Panel(new BorderLayout());
		panelNorth.add(panelNorthSub1, BorderLayout.NORTH);
		panelNorth.add(panelNorthSub2, BorderLayout.CENTER);


		//メイン画面に上部パネルを追加
		add(panelNorth, BorderLayout.NORTH);
		//中央パネルにテキストメッセージ欄を設定
		panelCenterSub1 = new Panel();
		textMessage = new TextArea(18,80);
		textMessage.setEditable(false);
		panelCenterSub1.add(textMessage);

		panelCenterSub2 = new Panel();
		panelCenterSub2.add(buttonCheckReservation);


		//メイン画面に中央パネルを追加
		panelCenter = new Panel(new BorderLayout());
		panelCenter.add(panelCenterSub1, BorderLayout.NORTH);
		panelCenter.add(panelCenterSub2, BorderLayout.CENTER);
		add(panelCenter, BorderLayout.CENTER);


		//下部パネルにボタンを設定
		panelSouth = new Panel();
		panelSouth.add(buttonReservation);
		//panelSouth.add(buttonCancelReservation);


		//メイン画面に下部パネルを追加
		add(panelSouth, BorderLayout.SOUTH);

		//ボタンアクションリスナの追加
		buttonLog.addActionListener(this);
		buttonExplanation.addActionListener(this);
		buttonReservation.addActionListener(this);
		buttonCheckReservation.addActionListener(this);
		buttonCheckFacilityReservation.addActionListener(this);
		//buttonCancelReservation.addActionListener(this);
		choiceFacility.addItemListener(this);


		addWindowListener(this);
	}

	@Override
	public void itemStateChanged(ItemEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void windowClosing(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		System.exit(0);
	}

	@Override
	public void windowClosed(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void windowActivated(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO 自動生成されたメソッド・スタブ

	}

	@SuppressWarnings("static-access")
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO 自動生成されたメソッド・スタブ
		String result = new String();
		if (e.getSource() == buttonLog) {
			result = reservationControl.loginLogout(this);
		}else if(e.getSource() == buttonExplanation) {
			result = reservationControl.getFacilityExplanation(choiceFacility.getSelectedItem());
		}else if(e.getSource() == buttonReservation) {
			result = reservationControl.makeReservation(this);
		}else if(e.getSource() == buttonCheckReservation){
			result = reservationControl.checkMyReservation(this);
		}else if(e.getSource() == buttonCheckFacilityReservation) {
			result = reservationControl.checkFacilityReservation(choiceFacility.getSelectedItem());
		}
		textMessage.setText(result);
	}

}
